#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.8
# from lexical definition file "src/config/config.rex".
#++

require 'racc/parser'
# Rexical version of 
# https://github.com/collectd/collectd/blob/14c59711e8470798428845ea2ecbdbe28fceb164/src/liboconfig/scanner.l
class CollectdConfig < Racc::Parser
      require 'strscan'

      class ScanError < StandardError ; end

      attr_reader   :lineno
      attr_reader   :filename
      attr_accessor :state

      def scan_setup(str)
        @ss = StringScanner.new(str)
        @lineno =  1
        @state  = nil
      end

      def action
        yield
      end

      def scan_str(str)
        scan_setup(str)
        do_parse
      end
      alias :scan :scan_str

      def load_file( filename )
        @filename = filename
        File.open(filename, "r") do |f|
          scan_setup(f.read)
        end
      end

      def scan_file( filename )
        load_file(filename)
        do_parse
      end


        def next_token
          return if @ss.eos?

          # skips empty actions
          until token = _next_token or @ss.eos?; end
          token
        end

        def _next_token
          text = @ss.peek(1)
          @lineno  +=  1  if text == "\n"
          token = case @state
            when nil
          case
                  when (text = @ss.scan(/[ \t\b]/))
                    ;

                  when (text = @ss.scan(/\#.*/))
                    ;

                  when (text = @ss.scan(/\\(\r\n|\n)/))
                    ;

                  when (text = @ss.scan(/(\r\n|\n)/))
                     action { [:EOL, text] }

                  when (text = @ss.scan(/\//))
                     action { [:SLASH, text] }

                  when (text = @ss.scan(/</))
                     action { [:OPENBRAC, text] }

                  when (text = @ss.scan(/>/))
                     action { [:CLOSEBRAC, text] }

                  when (text = @ss.scan(/(true|yes|on)/))
                     action { [:BTRUE, true] }

                  when (text = @ss.scan(/(false|no|off)/))
                     action { [:BFALSE, false] }

                  when (text = @ss.scan(/(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?/))
                     action { [:UNQUOTED_STRING, text] }

                  when (text = @ss.scan(/((([0-9A-Fa-f]{1,4}):){6}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|::(([0-9A-Fa-f]{1,4}):){5}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|(([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):){4}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,1}([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):){3}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,2}([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):){2}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,3}([0-9A-Fa-f]{1,4}))?::([0-9A-Fa-f]{1,4}):(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,4}([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,5}([0-9A-Fa-f]{1,4}))?::([0-9A-Fa-f]{1,4})|((([0-9A-Fa-f]{1,4}):){0,6}([0-9A-Fa-f]{1,4}))?::)|(\[(([0-9A-Fa-f]{1,4}):){6}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|::(([0-9A-Fa-f]{1,4}):){5}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|(([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):){4}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,1}([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):){3}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,2}([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):){2}(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,3}([0-9A-Fa-f]{1,4}))?::([0-9A-Fa-f]{1,4}):(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,4}([0-9A-Fa-f]{1,4}))?::(([0-9A-Fa-f]{1,4}):([0-9A-Fa-f]{1,4})|(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])\.(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])(:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)|((([0-9A-Fa-f]{1,4}):){0,5}([0-9A-Fa-f]{1,4}))?::([0-9A-Fa-f]{1,4})|((([0-9A-Fa-f]{1,4}):){0,6}([0-9A-Fa-f]{1,4}))?::\](:(6(5(5(3[0-5]|[0-2][0-9])|[0-4][0-9][0-9])|[0-4][0-9][0-9][0-9])|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]?[0-9]?[0-9]?))?)/))
                     action { [:UNQUOTED_STRING, text] }

                  when (text = @ss.scan(/([\+\-]?[0-9]*\.[0-9]+([eE][\+\-][0-9]+)?|0[xX][0-9a-fA-F]+|0[0-7]+|[\+\-]?[0-9]+)/))
                     action { [:NUMBER, Integer(text)] }

                  when (text = @ss.scan(/\"([^\\"]+|\\.)*\"/))
                     action { [:QUOTED_STRING, text] }

                  when (text = @ss.scan(/[0-9A-Za-z_]+/))
                     action { [:UNQUOTED_STRING, text] }

                  when (text = @ss.scan(/./))
                     action { raise "Failure to match #{text}" }

          
          else
            text = @ss.string[@ss.pos .. -1]
            raise  ScanError, "can not match: '" + text + "'"
          end  # if

        else
          raise  ScanError, "undefined state: '" + state.to_s + "'"
        end  # case state
          token
        end  # def _next_token

  def tokens(str)
    scan_setup(str)
    tokens = []
    while token = next_token
      tokens << token 
    end
    tokens
  end
end # class
